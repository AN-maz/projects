<div class="d-flex flex-column h-100">
    <div class="p-3 border-bottom d-flex align-items-center">
        <a href="/profile/<%= otherUser.username %>" class="text-decoration-none text-dark d-flex align-items-center">
            <img src="/uploads/avatars/<%= otherUser.profilePicture %>" alt="Avatar" width="40" height="40"
                class="rounded-circle me-3">
            <h5 class="mb-0">
                <%= otherUser.username %>
            </h5>
        </a>
    </div>

    <div id="message-container" class="flex-grow-1 p-3" style="overflow-y: auto; height: 60vh;">
        <% if(messages.length> 0) { %>
            <% messages.forEach(message=> { %>
                <% if(message.sender._id.toString()===user._id.toString()) { %>
                    <div class="d-flex justify-content-end mb-3">
                        <div class="bg-primary text-white p-2 rounded" style="max-width: 70%;"><%- message.content %>
                                <div class="text-end text-light opacity-75" style="font-size: 0.75rem;">
                                    <%= new Date(message.createdAt).toLocaleTimeString('id-ID', { hour: '2-digit' ,
                                        minute: '2-digit' }) %>
                                </div>
                        </div>
                    </div>
                    <% } else { %>
                        <div class="d-flex justify-content-start mb-3">
                            <div class="bg-light p-2 rounded" style="max-width: 70%;"><%- message.content %>
                                    <div class="text-end text-muted" style="font-size: 0.75rem;">
                                        <%= new Date(message.createdAt).toLocaleTimeString('id-ID', { hour: '2-digit' ,
                                            minute: '2-digit' }) %>
                                    </div>
                            </div>
                        </div>
                        <% } %>
                            <% }) %>
                                <% } else { %>
                                    <p id="no-message-placeholder" class="text-center text-muted">Belum ada pesan. Mulai
                                        percakapan!</p>
                                    <% } %>
    </div>

    <div class="p-3 border-top bg-white">
        <form id="chat-form">
            <div class="input-group">
                <input type="text" id="message-input" name="content" class="form-control" placeholder="Ketik pesan..."
                    required autocomplete="off">
                <button class="btn btn-primary" type="submit">Kirim</button>
            </div>
        </form>
    </div>
</div>

<% let conversationId=null; if (typeof conversation !=='undefined' && conversation && conversation._id) {
    conversationId=conversation._id.toString(); } else if (typeof messages !=='undefined' && messages.length> 0) {
    conversationId = messages[0].conversationId.toString();
    }
    %>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const chatForm = document.getElementById('chat-form');
        const messageInput = document.getElementById('message-input');
        const messageContainer = document.getElementById('message-container');
        const noMessagePlaceholder = document.getElementById('no-message-placeholder');
        const currentUser = { _id: '<%= user._id.toString() %>' };
        const convId = '<%= conversationId %>';

        if (convId) {
            socket.emit('joinConversation', convId);
            socket.emit('markAsRead', { conversationId: convId, userId: currentUser._id });
        }

        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const content = messageInput.value.trim();
            if (content && convId) {
                socket.emit('sendMessage', {
                    conversationId: convId,
                    sender: currentUser._id,
                    content: content,
                });
                messageInput.value = '';
            }
        });

        socket.on('newMessage', (message) => {
            if (noMessagePlaceholder) noMessagePlaceholder.remove();
            if (!message.sender) return;

            const messageElement = document.createElement('div');
            const isMyMessage = message.sender._id.toString() === currentUser._id;

            messageElement.classList.add('d-flex', isMyMessage ? 'justify-content-end' : 'justify-content-start', 'mb-3');
            const bubble = `<div class="${isMyMessage ? 'bg-primary text-white' : 'bg-light'} p-2 rounded" style="max-width: 70%;">${message.content.replace(/</g, "&lt;").replace(/>/g, "&gt;")}<div class="${isMyMessage ? 'text-end text-light opacity-75' : 'text-end text-muted'}" style="font-size: 0.75rem;">${new Date(message.createdAt).toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}</div></div>`;
            messageElement.innerHTML = bubble;
            messageContainer.appendChild(messageElement);
            messageContainer.scrollTop = messageContainer.scrollHeight;
        });

        if (messageContainer) {
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }
    </script>